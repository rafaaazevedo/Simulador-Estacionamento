/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/*
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
*/
/**
 *
 * @author rafael
 */
public class Tela extends javax.swing.JFrame {
    ArrayList<Veiculo> veiculos = new ArrayList<Veiculo>();
    ArrayList<Vaga> vagas = new ArrayList<Vaga>();
    ArrayList<Veiculo> aux = new ArrayList<Veiculo>();
    DefaultTableModel modeloTableVeiculo;
    DefaultTableModel modeloTableVaga;
    /**
     * Creates new form Tela
     */
    public Tela() {
        initComponents();
        
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulador Estacionamento ");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parking"));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imagem3.png"))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Modelo", "N. Chassi", "Peso", "Altura", "Comprimento", "Largura"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Veículos em espera");

        jLabel3.setText("Vagas disponíveis");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID vaga", "Peso máx", "Altura máx", "Comprimento máx", "Largura máx", "Vaga Ocupada"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/application_go.png"))); // NOI18N
        jMenu2.setText("Abrir");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem2.setText("Iniciar uma nova simulação");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Continuar uma simulação salva");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/car_add.png"))); // NOI18N
        jMenu1.setText("Entrar");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Entrar no estacionamento");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/zoom_in.png"))); // NOI18N
        jMenu3.setText("Pesquisar");

        jMenuItem7.setText("Pesquisar vaga");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/car_delete.png"))); // NOI18N
        jMenu4.setText("Sair");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });

        jMenuItem6.setText("Sair do estacionamento");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/disk.png"))); // NOI18N
        jMenu5.setText("Salvar");
        jMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu5ActionPerformed(evt);
            }
        });

        jMenuItem5.setText("Salvar dados");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuBar1.add(jMenu5);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/page_white_text.png"))); // NOI18N
        jMenu6.setText("Relatórios");

        jMenuItem8.setText("Relatório da simulação");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem8);

        jMenuBar1.add(jMenu6);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancel.png"))); // NOI18N
        jMenu7.setText("Fim");

        jMenuItem4.setText("Fechar o simulador");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem4);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        try {
            entrar();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        try {
            // TODO add your handling code here:
            abrirNovo();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
       
        try {
            fim();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            // TODO add your handling code here:
            abrirSalvo();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            sair();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        pesquisar();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu5ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu5ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        salvar();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        try {
            // TODO add your handling code here:
            relatorio();
        } catch (IOException ex) {
            Logger.getLogger(Tela.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
        //criar o arquivo relatório para armazenar a data de inicio da simulação       
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();
    
        File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
        if(!arquivo.exists()){
            arquivo.createNewFile();
        }
        try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("Data e horário do inicio da simulação:"+ dateFormat.format(date));
                bw.newLine();
            }
            fw.close();
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    public void abrirNovo() throws IOException{          
            FileReader arquivo = new FileReader("VEICULOS.txt");
            BufferedReader lerArquivo = new BufferedReader(arquivo);
            FileReader arquivo2 = new FileReader("VAGAS.txt");
            BufferedReader lerArquivo2 = new BufferedReader(arquivo2);
            
            //esvazia arraylist de veiculos e vagas
            veiculos.clear();
            vagas.clear();
            aux.clear();
                          
            //veiculos
            String linha = lerArquivo.readLine();//lê a primeira linha
        
            while(linha != null){
                Veiculo carro = new Veiculo();
                String[] atributos = linha.split(",");
                carro.setmodelo(atributos[0]);
                carro.setnumeroChassi(Integer.parseInt(atributos[1]));
                carro.setpeso(Integer.parseInt(atributos[2]));
                carro.setaltura(Float.parseFloat(atributos[3]));
                carro.setcomprimento(Float.parseFloat(atributos[4]));
                carro.setlargura(Float.parseFloat(atributos[5]));
                veiculos.add(carro);
            
                linha=lerArquivo.readLine();//lê a próxima linha
            
            }
            
            //MOSTRA VEÍCULOS NA JTABLE
            modeloTableVeiculo = (DefaultTableModel) jTable1.getModel();           
            //Aqui verifico se a jTable tem algum registo se tiver eu deleto
            while (modeloTableVeiculo.getRowCount() > 0) {
                modeloTableVeiculo.removeRow(0);
            }
            //Aqui eu adiciono cada linha da lista na jTable
            for (Veiculo c : veiculos) {
                modeloTableVeiculo.addRow(new Object[] { c.getmodelo(), c.getnumeroChassi(), c.getpeso(), c.getaltura(), c.getcomprimento(), c.getlargura() });
            }
            
            
            //vagas
            String linha2 = lerArquivo2.readLine();
        
            while(linha2 != null){
                Vaga espaço = new Vaga();
                String[] atributos2 = linha2.split(",");
                espaço.setidentificacao(Integer.parseInt(atributos2[0]));
                espaço.setpesoMaximo(Integer.parseInt(atributos2[1]));
                espaço.setalturaMaxima(Float.parseFloat(atributos2[2]));
                espaço.setcomprimentoMaximo(Float.parseFloat(atributos2[3]));
                espaço.setlarguraMaxima(Float.parseFloat(atributos2[4]));
                espaço.setocupada(false);
                vagas.add(espaço);
            
                linha2=lerArquivo2.readLine();
            }
            
            //MOSTRA VAGAS NO JTABLE
            modeloTableVaga = (DefaultTableModel) jTable2.getModel();           
            //Aqui verifico se a jTable tem algum registo se tiver eu deleto
            while (modeloTableVaga.getRowCount() > 0) {
                modeloTableVaga.removeRow(0);
            }
            //Aqui eu adiciono cada linha da lista na jTable
            for (Vaga d : vagas) {
                modeloTableVaga.addRow(new Object[] { d.getidentificacao(), d.getpesoMaximo(), d.getalturaMaxima(), d.getcomprimentoMaximo(), d.getlarguraMaxima(), d.getocupada()});
            }
        }
    
    public void abrirSalvo() throws IOException{
        try{
                FileInputStream saveFile = new FileInputStream("veiculosSALVO.dat");
                ObjectInputStream save = new ObjectInputStream(saveFile);
                veiculos = (ArrayList) save.readObject();
                save.close();
                
            }catch(Exception exec){  
            }
            try{
                FileInputStream saveFile = new FileInputStream("vagasSALVO.dat");
                ObjectInputStream save = new ObjectInputStream(saveFile);
                vagas = (ArrayList) save.readObject();
                save.close();
                
            }catch(Exception exec){  
            }
            try{
                FileInputStream saveFile = new FileInputStream("auxSALVO.dat");
                ObjectInputStream save = new ObjectInputStream(saveFile);
                aux = (ArrayList) save.readObject();
                save.close();
                
            }catch(Exception exec){  
            }
            
            //PARA CONFERIR OS DADOS SALVOS
            
            //MOSTRA VEÍCULOS NA JTABLE
            modeloTableVeiculo = (DefaultTableModel) jTable1.getModel();           
            //Aqui verifico se a jTable tem algum registo se tiver eu deleto
            while (modeloTableVeiculo.getRowCount() > 0) {
                modeloTableVeiculo.removeRow(0);
            }
            //Aqui eu adiciono cada linha da lista na jTable
            for (Veiculo c : veiculos) {
                modeloTableVeiculo.addRow(new Object[] { c.getmodelo(), c.getnumeroChassi(), c.getpeso(), c.getaltura(), c.getcomprimento(), c.getlargura() });
            }
        
            //MOSTRA VAGAS NO JTABLE
            modeloTableVaga = (DefaultTableModel) jTable2.getModel();           
            //Aqui verifico se a jTable tem algum registo se tiver eu deleto
            while (modeloTableVaga.getRowCount() > 0) {
                modeloTableVaga.removeRow(0);
            }
            //Aqui eu adiciono cada linha da lista na jTable
            for (Vaga d : vagas) {
                modeloTableVaga.addRow(new Object[] { d.getidentificacao(), d.getpesoMaximo(), d.getalturaMaxima(), d.getcomprimentoMaximo(), d.getlarguraMaxima(), d.getocupada()});
            }  
    }
    
    public void entrar() throws IOException{
        int id, nChassi;
        modeloTableVeiculo = (DefaultTableModel) jTable1.getModel();
        modeloTableVaga = (DefaultTableModel) jTable2.getModel();
        
        //MOSTRA VEÍCULOS NA JTABLE              
        //Aqui verifico se a jTable tem algum registo se tiver eu deleto
        while (modeloTableVeiculo.getRowCount() > 0) {
            modeloTableVeiculo.removeRow(0);
        }
        //Aqui eu adiciono cada linha da lista na jTable
        for (Veiculo c : veiculos) {
            modeloTableVeiculo.addRow(new Object[] { c.getmodelo(), c.getnumeroChassi(), c.getpeso(), c.getaltura(), c.getcomprimento(), c.getlargura() });
        } 
        
        //MOSTRA VAGAS NO JTABLE           
        //Aqui verifico se a jTable tem algum registo se tiver eu deleto
        while (modeloTableVaga.getRowCount() > 0) {
            modeloTableVaga.removeRow(0);
        }
        //Aqui eu adiciono cada linha da lista na jTable
        for (Vaga d : vagas) {
            modeloTableVaga.addRow(new Object[] { d.getidentificacao(), d.getpesoMaximo(), d.getalturaMaxima(), d.getcomprimentoMaximo(), d.getlarguraMaxima(), d.getocupada()});
        }
        
        //entrada do usuário
        id=Integer.parseInt(JOptionPane.showInputDialog("Informe o identificador da vaga:"));       
        nChassi=Integer.parseInt(JOptionPane.showInputDialog("Informe o número de chassi:"));
        
        int i,j;
        for(i=0;i<vagas.size();i++){
            if(id == vagas.get(i).getidentificacao()){
                for(j=0;j<veiculos.size();j++){
                    if(nChassi == veiculos.get(j).getnumeroChassi()){
                        if(vagas.get(i).getocupada()==true){
                            JOptionPane.showMessageDialog(null,"A vaga já está ocupada, portanto não aloca o veículo!");
                            File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
                            if(!arquivo.exists()){
                            arquivo.createNewFile();
                            }
                            try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
                                try (BufferedWriter bw = new BufferedWriter(fw)) {
                                    bw.write("<entrada="+1+"/saida="+0+">,<sucesso="+0+"/"+"/falha="+1+">,<chassi do veículo="+veiculos.get(j).getnumeroChassi()+">,<identificador de vaga="+vagas.get(i).getidentificacao()+">,<data e horário="+getDateTime()+">");
                                    bw.newLine();
                                }
                                fw.close();
                            }
                            vagas.get(i).contaFalha();
                        }
                        else{
                            if(veiculos.get(j).getpeso() <= vagas.get(i).getpesoMaximo() && veiculos.get(j).getaltura()<=vagas.get(i).getalturaMaxima() && veiculos.get(j).getcomprimento()<=vagas.get(i).getcomprimentoMaximo() && veiculos.get(j).getlargura()<=vagas.get(i).getlarguraMaxima()){
                                vagas.get(i).setocupada(true);//ocupa
                                JOptionPane.showMessageDialog(null,"Aloca o automóvel!");
                                File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
                                if(!arquivo.exists()){
                                    arquivo.createNewFile();
                                }
                                try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
                                    try (BufferedWriter bw = new BufferedWriter(fw)) {
                                        bw.write("<entrada="+1+"/saida="+0+">,<sucesso="+1+"/falha="+0+">,<chassi do veículo="+veiculos.get(j).getnumeroChassi()+">,<identificador de vaga="+vagas.get(i).getidentificacao()+">,<data e horário="+getDateTime()+">");
                                        bw.newLine();
                                    }
                                    fw.close();
                                }
                                
                                vagas.get(i).contaSucesso();
                                if(veiculos.get(j).getpeso()>=2500){
                                    vagas.get(i).contaPesado();
                                }
                                else{
                                    vagas.get(i).contaLeve();
                                }
                                if(veiculos.get(j).getaltura()>=1.7){
                                    vagas.get(i).contaAlto();
                                }
                                else{
                                    vagas.get(i).contaBaixo();
                                }
                                if(veiculos.get(j).getcomprimento()>=2.5){
                                    vagas.get(i).contaLongo();
                                }
                                else{
                                    vagas.get(i).contaCurto();
                                }
                                if(veiculos.get(j).getlargura()>=1.6){
                                    vagas.get(i).contaLargo();
                                }
                                else{
                                    vagas.get(i).contaEstreito();
                                }
                                aux.add(veiculos.get(j));//adiciona o veiculo na primeira posicao do aux
                                veiculos.remove(j);//remove o veiculo do array veiculos    
                                
                                //MOSTRA VEÍCULOS NA JTABLE                                           
                                //Aqui verifico se a jTable tem algum registo se tiver eu deleto
                                while (modeloTableVeiculo.getRowCount() > 0) {
                                    modeloTableVeiculo.removeRow(0);
                                }
                                //Aqui eu adiciono cada linha da lista na jTable
                                for (Veiculo c : veiculos) {
                                    modeloTableVeiculo.addRow(new Object[] { c.getmodelo(), c.getnumeroChassi(), c.getpeso(), c.getaltura(), c.getcomprimento(), c.getlargura() });
                                }
                                
                                //MOSTRA VAGAS NO JTABLE         
                                //Aqui verifico se a jTable tem algum registo se tiver eu deleto
                                while (modeloTableVaga.getRowCount() > 0) {
                                    modeloTableVaga.removeRow(0);
                                }
                                //Aqui adiciono cada linha da lista na jTable
                                for (Vaga d : vagas) {
                                    modeloTableVaga.addRow(new Object[] { d.getidentificacao(), d.getpesoMaximo(), d.getalturaMaxima(), d.getcomprimentoMaximo(), d.getlarguraMaxima(), d.getocupada()});
                                }
                                
                            }
                            else{
                                JOptionPane.showMessageDialog(null,"A vaga não suporta as medidas do veículo!");
                                File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
                                if(!arquivo.exists()){
                                    arquivo.createNewFile();
                                }
                                try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
                                    try (BufferedWriter bw = new BufferedWriter(fw)) {
                                        bw.write("<entrada="+1+"/saida="+0+">,<sucesso="+0+"/falha="+1+">,<chassi do veículo="+veiculos.get(j).getnumeroChassi()+">,<identificador de vaga="+vagas.get(i).getidentificacao()+">,<data e horário="+getDateTime()+">");

                                        bw.newLine();
                                    }
                                    fw.close();
                                }
                                vagas.get(i).contaFalha();
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void sair() throws IOException{
        int i, id;
        //MOSTRA VAGAS NO JTABLE
        modeloTableVaga = (DefaultTableModel) jTable2.getModel();           
        //Aqui verifico se a jTable tem algum registo se tiver eu deleto
        while (modeloTableVaga.getRowCount() > 0) {
            modeloTableVaga.removeRow(0);
        }
        //Aqui adiciono cada linha da lista na jTable
        for (Vaga d : vagas) {
            modeloTableVaga.addRow(new Object[] { d.getidentificacao(), d.getpesoMaximo(), d.getalturaMaxima(), d.getcomprimentoMaximo(), d.getlarguraMaxima(), d.getocupada()});
        }
        
        //entrada do usuário
        id=Integer.parseInt(JOptionPane.showInputDialog("Informe o identificador da vaga:"));
        
        for(i=0;i<vagas.size();i++){
            if(vagas.get(i).getidentificacao() == id){
                if(vagas.get(i).getocupada()==false){
                    JOptionPane.showMessageDialog(null,"A vaga já está desocupada!");
                    File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
                    if(!arquivo.exists()){
                        arquivo.createNewFile();
                    }
                    try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
                        try (BufferedWriter bw = new BufferedWriter(fw)) {
                            bw.write("<entrada="+0+"/saida="+1+">,<sucesso="+0+"/falha="+1+">,<chassi do veículo="+">,<identificador de vaga="+vagas.get(i).getidentificacao()+">,<data e horário="+getDateTime()+">");
                            bw.newLine();
                        }
                        fw.close();
                    }
                }
                else{
                        vagas.get(i).setocupada(false);//desocupa a vaga
                        JOptionPane.showMessageDialog(null,"Desocupou a vaga!");
                        File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
                        if(!arquivo.exists()){
                            arquivo.createNewFile();
                        }
                        try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
                            try (BufferedWriter bw = new BufferedWriter(fw)) {
                                bw.write("<entrada="+0+"/saida="+1+">,<sucesso="+1+"/"+"/falha="+0+">,<chassi do veículo="+">,<identificador de vaga="+vagas.get(i).getidentificacao()+">,<data e horário="+getDateTime()+">");
                                bw.newLine();
                            }
                            fw.close();
                        }
                }
            }
        }
        
    }
    
    public void pesquisar(){
        int numChassi;
        numChassi=Integer.parseInt(JOptionPane.showInputDialog("Digite o número do chassi:"));
        int i,j;
        for(i=0;i<veiculos.size();i++){
            if(veiculos.get(i).getnumeroChassi() == numChassi){
                for(j=0;j<vagas.size();j++){
                    if(veiculos.get(i).getpeso() <= vagas.get(j).getpesoMaximo() && veiculos.get(i).getaltura()<=vagas.get(j).getalturaMaxima() && veiculos.get(i).getcomprimento()<=vagas.get(j).getcomprimentoMaximo() && veiculos.get(i).getlargura()<=vagas.get(j).getlarguraMaxima()){//a vaga mais próxima, que está dentro das dimensões
                        JOptionPane.showMessageDialog(null, "É possível estacionar na vaga do identificador: "+ vagas.get(j).getidentificacao());
                    }
                }
            }
        }
    }
    
    public void salvar() {   
        try{
                FileOutputStream saveFile=new FileOutputStream("veiculosSALVO.dat");
                ObjectOutputStream save = new ObjectOutputStream(saveFile);
                save.writeObject(veiculos);
                save.close();
            }catch(Exception exc){
            }
            try{
                FileOutputStream saveFile=new FileOutputStream("vagasSALVO.dat");
                ObjectOutputStream save = new ObjectOutputStream(saveFile);
                save.writeObject(vagas);
                save.close();
            }catch(Exception exc){
            }
            try{
                FileOutputStream saveFile=new FileOutputStream("auxSALVO.dat");
                ObjectOutputStream save = new ObjectOutputStream(saveFile);
                save.writeObject(aux);
                save.close();
            }catch(Exception exc){
            }
        
    }
    
    public void relatorio() throws IOException{
        
        File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
        if(!arquivo.exists()){
            arquivo.createNewFile();
        }
        try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                //número de sucesso ou falha na vaga
                int i;
                for(i=0;i<vagas.size();i++){
                    bw.write("Vaga do identificador "+(101+i)+": número de sucesso "+vagas.get(i).getsucesso()+", número de falhas "+vagas.get(i).getfalha());
                    bw.newLine();
                }
                
                //imprime pesado, leve, alto, baixo, etc.
                int j;
                for(j=0;j<vagas.size();j++){
                    bw.write("Vaga do identificador "+(101+j)+ ": número de pesados "+vagas.get(j).getPesado()+", leves"+vagas.get(j).getLeve()+ ", alto"+vagas.get(j).getAlto()+", baixo"+vagas.get(j).getBaixo()+", longo"+vagas.get(j).getLongo()+", curto"+vagas.get(j).getCurto()+", largo"+vagas.get(j).getLargo()+", estreito"+vagas.get(j).getEstreito() );
                    bw.newLine();
                }
                
                //lista de veiculos que estacionaram hoje, em ordem decrescente do mair para o menor
                Collections.reverse(aux);
                
                for(Veiculo p: aux){
                    bw.write(p.getpeso()+","+","+p.getaltura()+","+p.getcomprimento()+","+p.getlargura());
                    bw.newLine();
                }
            }
            fw.close();
          
        }
    }
    
    public void fim() throws IOException{
        File arquivo = new File("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt");
        if(!arquivo.exists()){
            arquivo.createNewFile();
        }
        try (FileWriter fw = new FileWriter("/home/rafael/Documentos/POO/InterfaceGrafica/InterfaceGrafica/relatorio.txt",true)) {
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write("Data e horário do fim da simulação:"+getDateTime());
                bw.newLine();
            }
            fw.close();
        }
        catch(IOException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        
        int res = JOptionPane.showConfirmDialog(null, "Deseja realmente sair?");
        switch(res) 
        {                        
            case JOptionPane.CANCEL_OPTION:				
                break;
            case JOptionPane.NO_OPTION:				
                break;
            case JOptionPane.YES_OPTION:				
                    System.exit(0); //encerra a simulação
                break;
            case JOptionPane.CLOSED_OPTION:				
                break;
        }
    }

    public String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Date date = new Date();
        return dateFormat.format(date);
    }
}
    
   
        
    
 
